{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./GamePage.scss\";\nimport BoardRender from \"../BoardRender/BoardRender\"; // query string\n\nimport qs from \"qs\"; // socket.io client\n\nconst io = require(\"socket.io-client\");\n\nconst socket = io(\"http://localhost:5000\");\nexport default function GamePage() {\n  const [waiting, setWaiting] = useState(true);\n  const [roomID, setRoomID] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [errorJoin, setErrorJoin] = useState(false);\n  const [playerID, setPlayerID] = useState(\"\");\n  const [sign, setSign] = useState(\"\");\n  const [board, setBoard] = useState([]);\n  const [turn, setTurn] = useState(null);\n  const [enemy, setEnemy] = useState([]);\n  useEffect(() => {\n    //get current room and name\n    const {\n      room,\n      name\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    }); //handle error join\n\n    if (!name || !room) {\n      setErrorJoin(true);\n    }\n\n    setRoomID(room);\n    setName(name);\n  }, []);\n  useEffect(() => {\n    if (roomID) {\n      socket.emit(\"newJoinToTheRoom\", {\n        roomID,\n        name\n      });\n    }\n  }, [roomID]);\n  socket.on(\"initSignAndId\", ({\n    id,\n    sign\n  }) => {\n    setSign(sign);\n    setPlayerID(id);\n  });\n  socket.on(\"startTheGame\", ({\n    turn,\n    board,\n    waiting,\n    players\n  }) => {\n    const isCurrentTurn = turn === sign;\n    const enemyPlayer = players.filter(player => !player.includes(playerID));\n    setTurn(isCurrentTurn);\n    setBoard(board);\n    setWaiting(waiting);\n    setEnemy(enemyPlayer);\n  });\n\n  const handleClick = i => {\n    socket.emit(\"playerMove\", {\n      i,\n      sign\n    });\n  }; // Render\n\n\n  const classNameOfTheCell = i => {\n    return i === 0 ? \"cell bottom right\" : i === 1 ? \"cell bottom\" : i === 2 ? \"cell bottom left\" : i === 3 ? \"cell bottom right\" : i === 4 ? \"cell bottom\" : i === 5 ? \"cell bottom left\" : i === 6 ? \"cell right\" : i === 7 ? \"cell right\" : \"cell\";\n  };\n\n  if (errorJoin) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: `/`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, `Hello ${name}!`), waiting ? /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, `Waiting another player... Copy game ID => ${roomID}`) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-\\u0441ontainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, board.map((el, i) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNameOfTheCell(i),\n        onClick: () => handleClick(i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }\n      });\n    })));\n  }\n}","map":{"version":3,"sources":["/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js"],"names":["React","useEffect","useState","Redirect","BoardRender","qs","io","require","socket","GamePage","waiting","setWaiting","roomID","setRoomID","name","setName","errorJoin","setErrorJoin","playerID","setPlayerID","sign","setSign","board","setBoard","turn","setTurn","enemy","setEnemy","room","parse","window","location","search","ignoreQueryPrefix","emit","on","id","players","isCurrentTurn","enemyPlayer","filter","player","includes","handleClick","i","classNameOfTheCell","map","el"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport \"./GamePage.scss\";\nimport BoardRender from \"../BoardRender/BoardRender\";\n\n// query string\nimport qs from \"qs\";\n// socket.io client\nconst io = require(\"socket.io-client\");\nconst socket = io(\"http://localhost:5000\");\n\nexport default function GamePage() {\n  const [waiting, setWaiting] = useState(true);\n  const [roomID, setRoomID] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [errorJoin, setErrorJoin] = useState(false);\n  const [playerID, setPlayerID] = useState(\"\");\n  const [sign, setSign] = useState(\"\");\n  const [board, setBoard] = useState([]);\n  const [turn, setTurn] = useState(null);\n  const [enemy, setEnemy] = useState([]);\n\n  useEffect(() => {\n    //get current room and name\n    const { room, name } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    //handle error join\n    if (!name || !room) {\n      setErrorJoin(true);\n    }\n    setRoomID(room);\n    setName(name);\n  }, []);\n\n  useEffect(() => {\n    if (roomID) {\n      socket.emit(\"newJoinToTheRoom\", { roomID, name });\n    }\n  }, [roomID]);\n\n  socket.on(\"initSignAndId\", ({ id, sign }) => {\n    setSign(sign);\n    setPlayerID(id);\n  });\n\n  socket.on(\"startTheGame\", ({ turn, board, waiting, players }) => {\n    const isCurrentTurn = turn === sign;\n    const enemyPlayer = players.filter((player) => !player.includes(playerID));\n    setTurn(isCurrentTurn);\n    setBoard(board);\n    setWaiting(waiting);\n    setEnemy(enemyPlayer);\n  });\n\n  const handleClick = (i) => {\n    socket.emit(\"playerMove\", { i, sign });\n  };\n\n  // Render\n\n  const classNameOfTheCell = (i) => {\n    return i === 0\n      ? \"cell bottom right\"\n      : i === 1\n      ? \"cell bottom\"\n      : i === 2\n      ? \"cell bottom left\"\n      : i === 3\n      ? \"cell bottom right\"\n      : i === 4\n      ? \"cell bottom\"\n      : i === 5\n      ? \"cell bottom left\"\n      : i === 6\n      ? \"cell right\"\n      : i === 7\n      ? \"cell right\"\n      : \"cell\";\n  };\n\n  if (errorJoin) {\n    return <Redirect to={`/`} />;\n  } else {\n    return (\n      <div>\n        <h2>{`Hello ${name}!`}</h2>\n        {waiting ? (\n          <h3>{`Waiting another player... Copy game ID => ${roomID}`}</h3>\n        ) : null}\n        <div className=\"board-сontainer\">\n          {board.map((el, i) => {\n            return (\n              <div\n                className={classNameOfTheCell(i)}\n                onClick={() => handleClick(i)}></div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}