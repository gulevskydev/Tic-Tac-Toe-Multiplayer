{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./GamePage.scss\";\nimport BoardRender from \"../BoardRender/BoardRender\"; // query string\n\nimport qs from \"qs\"; // socket.io client\n\nconst io = require(\"socket.io-client\");\n\nconst socket = io(\"http://localhost:5000\");\nexport default function GamePage() {\n  // state\n  const [room, setRoom] = useState(\"\");\n  const [errorJoinedRoom, setErrorJoinedRoom] = useState(false);\n  const [waitSecondPlayer, setWaitSecondPlayer] = useState(false);\n  const [socketID, setSocketID] = useState(null);\n  const [mark, setMark] = useState(\"O\");\n  const [turn, setTurn] = useState(true);\n  const [opponent, setOpponent] = useState([]);\n  const [end, setEnd] = useState(false);\n  const [gameState, setGameState] = useState([]);\n  const [board, setBoard] = useState(new Array(9).fill(null));\n  useEffect(() => {\n    console.log(\"NEW\"); //get current room and name\n\n    const {\n      room,\n      name\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    });\n    setRoom(room);\n    socket.emit(\"joinedNewRoom\", {\n      room,\n      name\n    }); // asigning id and mark\n\n    socket.on(\"assignID\", ({\n      id,\n      playerMark\n    }) => {\n      console.log(id, playerMark);\n      setMark(playerMark);\n      setSocketID(id);\n    }); // creating game (board, players ...)\n\n    socket.on(\"startTheGame\", ({\n      stateOfTheGame,\n      players\n    }) => {\n      setWaitSecondPlayer(false);\n      startGame(stateOfTheGame, players);\n    });\n    socket.on(\"updateBoard\", ({\n      stateOfTheGame,\n      turn\n    }) => {\n      this.setBoard(gameState);\n      this.setTurn(turn);\n      this.setMessage();\n    } //   handleUpdateGame(stateOfTheGame, turn)\n    );\n  }, []);\n\n  const handleUpdateGame = (state, turn) => {\n    setBoard(state);\n    setTurn(turn);\n  }; // assigning board state and players data\n\n\n  const startGame = (state, players) => {\n    const player2 = players.filter(el => el.id !== socketID)[0][1];\n    setOpponent([player2, 0]);\n    setBoard(state);\n  };\n\n  const handleClick = id => {\n    console.log(\"Click\", id, room, mark);\n    socket.emit(\"move\", {\n      room,\n      mark,\n      id\n    });\n  };\n\n  const renderBoard = i => {\n    return /*#__PURE__*/React.createElement(BoardRender, {\n      key: i,\n      value: board[i],\n      player: mark,\n      end: end,\n      id: i,\n      onClick: () => handleClick(i),\n      turn: turn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    });\n  };\n\n  const boardArray = [];\n\n  for (let i = 0; i < 9; i++) {\n    const newSquare = renderBoard(i);\n    boardArray.push(newSquare);\n  } // Render\n\n\n  if (errorJoinedRoom) return /*#__PURE__*/React.createElement(Redirect, {\n    to: `/`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 31\n    }\n  });else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, boardArray));\n  }\n}","map":{"version":3,"sources":["/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js"],"names":["React","useEffect","useState","Redirect","BoardRender","qs","io","require","socket","GamePage","room","setRoom","errorJoinedRoom","setErrorJoinedRoom","waitSecondPlayer","setWaitSecondPlayer","socketID","setSocketID","mark","setMark","turn","setTurn","opponent","setOpponent","end","setEnd","gameState","setGameState","board","setBoard","Array","fill","console","log","name","parse","window","location","search","ignoreQueryPrefix","emit","on","id","playerMark","stateOfTheGame","players","startGame","setMessage","handleUpdateGame","state","player2","filter","el","handleClick","renderBoard","i","boardArray","newSquare","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport \"./GamePage.scss\";\nimport BoardRender from \"../BoardRender/BoardRender\";\n\n// query string\nimport qs from \"qs\";\n// socket.io client\nconst io = require(\"socket.io-client\");\nconst socket = io(\"http://localhost:5000\");\n\nexport default function GamePage() {\n  // state\n  const [room, setRoom] = useState(\"\");\n  const [errorJoinedRoom, setErrorJoinedRoom] = useState(false);\n  const [waitSecondPlayer, setWaitSecondPlayer] = useState(false);\n  const [socketID, setSocketID] = useState(null);\n  const [mark, setMark] = useState(\"O\");\n  const [turn, setTurn] = useState(true);\n  const [opponent, setOpponent] = useState([]);\n  const [end, setEnd] = useState(false);\n  const [gameState, setGameState] = useState([]);\n  const [board, setBoard] = useState(new Array(9).fill(null));\n\n  useEffect(() => {\n    console.log(\"NEW\");\n    //get current room and name\n    const { room, name } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    setRoom(room);\n    socket.emit(\"joinedNewRoom\", { room, name });\n\n    // asigning id and mark\n    socket.on(\"assignID\", ({ id, playerMark }) => {\n      console.log(id, playerMark);\n      setMark(playerMark);\n      setSocketID(id);\n    });\n\n    // creating game (board, players ...)\n    socket.on(\"startTheGame\", ({ stateOfTheGame, players }) => {\n      setWaitSecondPlayer(false);\n      startGame(stateOfTheGame, players);\n    });\n\n    socket.on(\n      \"updateBoard\",\n      ({ stateOfTheGame, turn }) => {\n        this.setBoard(gameState);\n        this.setTurn(turn);\n        this.setMessage();\n      }\n      //   handleUpdateGame(stateOfTheGame, turn)\n    );\n  }, []);\n\n  const handleUpdateGame = (state, turn) => {\n    setBoard(state);\n    setTurn(turn);\n  };\n\n  // assigning board state and players data\n  const startGame = (state, players) => {\n    const player2 = players.filter((el) => el.id !== socketID)[0][1];\n    setOpponent([player2, 0]);\n    setBoard(state);\n  };\n\n  const handleClick = (id) => {\n    console.log(\"Click\", id, room, mark);\n    socket.emit(\"move\", { room, mark, id });\n  };\n\n  const renderBoard = (i) => {\n    return (\n      <BoardRender\n        key={i}\n        value={board[i]}\n        player={mark}\n        end={end}\n        id={i}\n        onClick={() => handleClick(i)}\n        turn={turn}\n      />\n    );\n  };\n\n  const boardArray = [];\n  for (let i = 0; i < 9; i++) {\n    const newSquare = renderBoard(i);\n    boardArray.push(newSquare);\n  }\n  // Render\n  if (errorJoinedRoom) return <Redirect to={`/`} />;\n  else {\n    return (\n      <div className=\"container-board\">\n        <div className=\"board\">\n          {boardArray}\n\n          {/* {Array(9)\n            .fill(null)\n            .map((el, id) => {\n              return (\n                <button\n                  key={id}\n                  className=\"cell\"\n                  onClick={() => handleClick(id)}></button>\n              );\n            })} */}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}