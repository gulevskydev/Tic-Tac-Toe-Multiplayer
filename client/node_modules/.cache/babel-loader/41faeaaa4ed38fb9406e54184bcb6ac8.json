{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./GamePage.scss\";\nimport BoardRender from \"../BoardRender/BoardRender\";\nimport \"./fontawesome/css/font-awesome.css\"; // query string\n\nimport qs from \"qs\"; // socket.io client\n\nconst io = require(\"socket.io-client\");\n\nconst socket = io(\"http://localhost:5000\");\nexport default function GamePage() {\n  // main state\n  const [waiting, setWaiting] = useState(true);\n  const [roomID, setRoomID] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [errorJoin, setErrorJoin] = useState(false);\n  const [playerID, setPlayerID] = useState(\"\");\n  const [sign, setSign] = useState(\"\");\n  const [board, setBoard] = useState([]);\n  const [turn, setTurn] = useState(null);\n  const [enemy, setEnemy] = useState([]);\n  const [endGame, setEndGame] = useState(false);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [enemyScore, setEnemytScore] = useState(0);\n  useEffect(() => {\n    //get current room and name\n    const {\n      room,\n      name\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    }); //handle error join\n\n    if (!name || !room) {\n      setErrorJoin(true);\n    }\n\n    setRoomID(room);\n    setName(name);\n  }, []);\n  useEffect(() => {\n    if (roomID) {\n      socket.emit(\"newJoinToTheRoom\", {\n        roomID,\n        name\n      });\n    }\n  }, [roomID]);\n  socket.on(\"initSignAndId\", ({\n    id,\n    sign\n  }) => {\n    setSign(sign);\n    setPlayerID(id);\n  }); // when two players in the room start the game\n\n  socket.on(\"startTheGame\", ({\n    turn,\n    board,\n    waiting,\n    players\n  }) => {\n    const isCurrentTurn = turn === sign;\n    const enemyPlayer = players.filter(player => !player.includes(playerID));\n    setBoard(board);\n    setTurn(isCurrentTurn);\n    setWaiting(waiting);\n    setEnemy(enemyPlayer);\n  }); // update data from server\n\n  socket.on(\"updateBoard\", ({\n    board,\n    currentTurn,\n    signWinner\n  }) => {\n    const isCurrentTurn = currentTurn === sign;\n    setBoard(board);\n    setTurn(false);\n\n    if (signWinner) {\n      setEndGame(true);\n    } else {\n      setTurn(isCurrentTurn);\n    }\n  });\n\n  const handleClick = (e, i) => {\n    if (turn) {\n      console.log(e.target);\n      socket.emit(\"playerMove\", {\n        i,\n        sign,\n        roomID\n      });\n    } else {\n      console.log(\"CANT\");\n    }\n  };\n\n  const createUniqueRoomID = () => Date.now().toString(36) + Math.random().toString(36).substr(2);\n\n  useEffect(() => {}, [board]); // Render\n\n  const classNameOfTheCell = (i, el) => {\n    const notSelected = i === 0 ? \"cell bottom right\" : i === 1 ? \"cell bottom\" : i === 2 ? \"cell bottom left\" : i === 3 ? \"cell bottom right\" : i === 4 ? \"cell bottom\" : i === 5 ? \"cell bottom left\" : i === 6 ? \"cell right\" : i === 7 ? \"cell right\" : \"cell\";\n    return `${notSelected} `;\n  };\n\n  if (errorJoin) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: `/`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 12\n      }\n    });\n  } else if (waiting) {\n    return /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 12\n      }\n    }, `Waiting another player... Copy game ID => ${roomID}`);\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-\\u0441ontainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"turn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, turn ? \"Your turn\" : \"Wait for the opponent's move\"), board.map((el, i) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: createUniqueRoomID(),\n        className: classNameOfTheCell(i, el),\n        onClick: e => handleClick(e, i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"span-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: el === \"X\" ? \"fa fa-times\" : el === \"O\" ? \"fa fa-circle-o\" : \"\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }\n      })));\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, \"Score board\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"current-score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"currentName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }, \" You\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"score-player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, currentScore)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"enemy-score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"opponentName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, \" Oponent \"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"score-player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, enemyScore))))));\n  }\n}","map":{"version":3,"sources":["/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js"],"names":["React","useEffect","useState","Redirect","BoardRender","qs","io","require","socket","GamePage","waiting","setWaiting","roomID","setRoomID","name","setName","errorJoin","setErrorJoin","playerID","setPlayerID","sign","setSign","board","setBoard","turn","setTurn","enemy","setEnemy","endGame","setEndGame","currentScore","setCurrentScore","enemyScore","setEnemytScore","room","parse","window","location","search","ignoreQueryPrefix","emit","on","id","players","isCurrentTurn","enemyPlayer","filter","player","includes","currentTurn","signWinner","handleClick","e","i","console","log","target","createUniqueRoomID","Date","now","toString","Math","random","substr","classNameOfTheCell","el","notSelected","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport \"./GamePage.scss\";\nimport BoardRender from \"../BoardRender/BoardRender\";\nimport \"./fontawesome/css/font-awesome.css\";\n\n// query string\nimport qs from \"qs\";\n// socket.io client\nconst io = require(\"socket.io-client\");\nconst socket = io(\"http://localhost:5000\");\n\nexport default function GamePage() {\n  // main state\n  const [waiting, setWaiting] = useState(true);\n  const [roomID, setRoomID] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [errorJoin, setErrorJoin] = useState(false);\n  const [playerID, setPlayerID] = useState(\"\");\n  const [sign, setSign] = useState(\"\");\n  const [board, setBoard] = useState([]);\n  const [turn, setTurn] = useState(null);\n  const [enemy, setEnemy] = useState([]);\n  const [endGame, setEndGame] = useState(false);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [enemyScore, setEnemytScore] = useState(0);\n\n  useEffect(() => {\n    //get current room and name\n    const { room, name } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    //handle error join\n    if (!name || !room) {\n      setErrorJoin(true);\n    }\n    setRoomID(room);\n    setName(name);\n  }, []);\n\n  useEffect(() => {\n    if (roomID) {\n      socket.emit(\"newJoinToTheRoom\", { roomID, name });\n    }\n  }, [roomID]);\n\n  socket.on(\"initSignAndId\", ({ id, sign }) => {\n    setSign(sign);\n    setPlayerID(id);\n  });\n\n  // when two players in the room start the game\n  socket.on(\"startTheGame\", ({ turn, board, waiting, players }) => {\n    const isCurrentTurn = turn === sign;\n    const enemyPlayer = players.filter((player) => !player.includes(playerID));\n    setBoard(board);\n    setTurn(isCurrentTurn);\n    setWaiting(waiting);\n    setEnemy(enemyPlayer);\n  });\n\n  // update data from server\n  socket.on(\"updateBoard\", ({ board, currentTurn, signWinner }) => {\n    const isCurrentTurn = currentTurn === sign;\n    setBoard(board);\n    setTurn(false);\n    if (signWinner) {\n      setEndGame(true);\n    } else {\n      setTurn(isCurrentTurn);\n    }\n  });\n\n  const handleClick = (e, i) => {\n    if (turn) {\n      console.log(e.target);\n      socket.emit(\"playerMove\", { i, sign, roomID });\n    } else {\n      console.log(\"CANT\");\n    }\n  };\n\n  const createUniqueRoomID = () =>\n    Date.now().toString(36) + Math.random().toString(36).substr(2);\n\n  useEffect(() => {}, [board]);\n\n  // Render\n\n  const classNameOfTheCell = (i, el) => {\n    const notSelected =\n      i === 0\n        ? \"cell bottom right\"\n        : i === 1\n        ? \"cell bottom\"\n        : i === 2\n        ? \"cell bottom left\"\n        : i === 3\n        ? \"cell bottom right\"\n        : i === 4\n        ? \"cell bottom\"\n        : i === 5\n        ? \"cell bottom left\"\n        : i === 6\n        ? \"cell right\"\n        : i === 7\n        ? \"cell right\"\n        : \"cell\";\n\n    return `${notSelected} `;\n  };\n\n  if (errorJoin) {\n    return <Redirect to={`/`} />;\n  } else if (waiting) {\n    return <h3>{`Waiting another player... Copy game ID => ${roomID}`}</h3>;\n  } else {\n    return (\n      <div className=\"game-container\">\n        <div>\n          <div className=\"board-сontainer\">\n            <div className=\"turn\">\n              {turn ? \"Your turn\" : \"Wait for the opponent's move\"}\n            </div>\n            {board.map((el, i) => {\n              return (\n                <div\n                  key={createUniqueRoomID()}\n                  className={classNameOfTheCell(i, el)}\n                  onClick={(e) => handleClick(e, i)}>\n                  <div className=\"span-container\">\n                    <span\n                      className={\n                        el === \"X\"\n                          ? \"fa fa-times\"\n                          : el === \"O\"\n                          ? \"fa fa-circle-o\"\n                          : \"\"\n                      }\n                      aria-hidden=\"true\"></span>\n                  </div>\n                </div>\n              );\n            })}\n            <div className=\"board-score\">Score board</div>\n            <div className=\"container-score\">\n              <div className=\"current-score\">\n                <h3 className=\"currentName\"> You</h3>\n                <span className=\"score-player\">{currentScore}</span>\n              </div>\n              <div className=\"enemy-score\">\n                <h3 className=\"opponentName\"> Oponent </h3>\n                <span className=\"score-player\">{enemyScore}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}