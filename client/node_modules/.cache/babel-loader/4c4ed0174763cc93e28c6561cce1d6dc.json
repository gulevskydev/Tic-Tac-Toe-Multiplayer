{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./GamePage.scss\";\nimport BoardRender from \"../BoardRender/BoardRender\"; // query string\n\nimport qs from \"qs\"; // socket.io client\n\nconst io = require(\"socket.io-client\");\n\nconst socket = io(\"http://localhost:5000\");\nexport default function GamePage() {\n  // state\n  const [room, setRoom] = useState(\"\");\n  const [errorJoinedRoom, setErrorJoinedRoom] = useState(false);\n  const [waitSecondPlayer, setWaitSecondPlayer] = useState(false);\n  const [socketID, setSocketID] = useState(null);\n  const [mark, setMark] = useState(\"O\");\n  const [turn, setTurn] = useState(true);\n  const [opponent, setOpponent] = useState([]);\n  const [end, setEnd] = useState(false);\n  const [gameState, setGameState] = useState([]);\n  const [board, setBoard] = useState(new Array(9).fill(null));\n  const [firstTurn, setFirstTurn] = useState(false);\n  useEffect(() => {\n    console.log(\"NEW\"); //get current room and name\n\n    const {\n      room,\n      name\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    });\n    setRoom(room);\n    socket.emit(\"joinedNewRoom\", {\n      room,\n      name\n    });\n    console.log(\"Room created\"); // asigning id and mark\n\n    socket.on(\"assignID\", ({\n      id,\n      playerMark,\n      firstTurn\n    }) => {\n      setMark(playerMark);\n      setSocketID(id);\n    }); // creating game (board, players ...)\n\n    socket.on(\"startTheGame\", ({\n      stateOfTheGame,\n      players\n    }) => {\n      setWaitSecondPlayer(false);\n      startGame(stateOfTheGame, players);\n    });\n    socket.on(\"update\", ({\n      stateOfTheGame,\n      turn\n    }) => {\n      handleUpdateGame(stateOfTheGame, turn);\n      console.log(\"UODATE\", stateOfTheGame);\n    });\n  }, []);\n\n  const handleUpdateGame = (state, turn) => {\n    setBoard(state);\n    setTurn(turn);\n    console.log(\"update\", board);\n  }; // assigning board state and players data\n\n\n  const startGame = (state, players) => {\n    const player2 = players.filter(el => el.id !== socketID)[0][1];\n    setOpponent([player2, 0]);\n    setBoard(state);\n  };\n\n  const handleClick = (e, id) => {\n    console.log(\"Board\", board[id]);\n    console.log(\"Click\", id, room, mark);\n    e.target.parentNode.style;\n    socket.emit(\"move\", {\n      room,\n      mark,\n      id\n    });\n  };\n\n  const renderBoard = i => {\n    console.log(board[i]);\n    return /*#__PURE__*/React.createElement(BoardRender, {\n      key: i,\n      value: board[i],\n      player: mark,\n      end: end,\n      id: i,\n      onClick: e => handleClick(e, i),\n      turn: turn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    });\n  };\n\n  const boardArray = [];\n\n  for (let i = 0; i < 9; i++) {\n    const newSquare = renderBoard(i);\n    boardArray.push(newSquare);\n  } // Render\n\n\n  if (errorJoinedRoom) return /*#__PURE__*/React.createElement(Redirect, {\n    to: `/`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 31\n    }\n  });else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, boardArray));\n  }\n}","map":{"version":3,"sources":["/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js"],"names":["React","useEffect","useState","Redirect","BoardRender","qs","io","require","socket","GamePage","room","setRoom","errorJoinedRoom","setErrorJoinedRoom","waitSecondPlayer","setWaitSecondPlayer","socketID","setSocketID","mark","setMark","turn","setTurn","opponent","setOpponent","end","setEnd","gameState","setGameState","board","setBoard","Array","fill","firstTurn","setFirstTurn","console","log","name","parse","window","location","search","ignoreQueryPrefix","emit","on","id","playerMark","stateOfTheGame","players","startGame","handleUpdateGame","state","player2","filter","el","handleClick","e","target","parentNode","style","renderBoard","i","boardArray","newSquare","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport \"./GamePage.scss\";\nimport BoardRender from \"../BoardRender/BoardRender\";\n\n// query string\nimport qs from \"qs\";\n// socket.io client\nconst io = require(\"socket.io-client\");\nconst socket = io(\"http://localhost:5000\");\n\nexport default function GamePage() {\n  // state\n  const [room, setRoom] = useState(\"\");\n  const [errorJoinedRoom, setErrorJoinedRoom] = useState(false);\n  const [waitSecondPlayer, setWaitSecondPlayer] = useState(false);\n  const [socketID, setSocketID] = useState(null);\n  const [mark, setMark] = useState(\"O\");\n  const [turn, setTurn] = useState(true);\n  const [opponent, setOpponent] = useState([]);\n  const [end, setEnd] = useState(false);\n  const [gameState, setGameState] = useState([]);\n  const [board, setBoard] = useState(new Array(9).fill(null));\n  const [firstTurn, setFirstTurn] = useState(false);\n\n  useEffect(() => {\n    console.log(\"NEW\");\n    //get current room and name\n    const { room, name } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    setRoom(room);\n    socket.emit(\"joinedNewRoom\", { room, name });\n    console.log(\"Room created\");\n\n    // asigning id and mark\n    socket.on(\"assignID\", ({ id, playerMark, firstTurn }) => {\n      setMark(playerMark);\n      setSocketID(id);\n    });\n\n    // creating game (board, players ...)\n    socket.on(\"startTheGame\", ({ stateOfTheGame, players }) => {\n      setWaitSecondPlayer(false);\n      startGame(stateOfTheGame, players);\n    });\n\n    socket.on(\"update\", ({ stateOfTheGame, turn }) => {\n      handleUpdateGame(stateOfTheGame, turn);\n      console.log(\"UODATE\", stateOfTheGame);\n    });\n  }, []);\n\n  const handleUpdateGame = (state, turn) => {\n    setBoard(state);\n    setTurn(turn);\n    console.log(\"update\", board);\n  };\n\n  // assigning board state and players data\n  const startGame = (state, players) => {\n    const player2 = players.filter((el) => el.id !== socketID)[0][1];\n    setOpponent([player2, 0]);\n    setBoard(state);\n  };\n\n  const handleClick = (e, id) => {\n    console.log(\"Board\", board[id]);\n    console.log(\"Click\", id, room, mark);\n    e.target.parentNode.style;\n    socket.emit(\"move\", { room, mark, id });\n  };\n\n  const renderBoard = (i) => {\n    console.log(board[i]);\n    return (\n      <BoardRender\n        key={i}\n        value={board[i]}\n        player={mark}\n        end={end}\n        id={i}\n        onClick={(e) => handleClick(e, i)}\n        turn={turn}\n      />\n    );\n  };\n\n  const boardArray = [];\n  for (let i = 0; i < 9; i++) {\n    const newSquare = renderBoard(i);\n    boardArray.push(newSquare);\n  }\n  // Render\n  if (errorJoinedRoom) return <Redirect to={`/`} />;\n  else {\n    return (\n      <div className=\"container-board\">\n        <div className=\"board\">\n          {boardArray}\n\n          {/* {Array(9)\n            .fill(null)\n            .map((el, id) => {\n              return (\n                <button\n                  key={id}\n                  className=\"cell\"\n                  onClick={() => handleClick(id)}></button>\n              );\n            })} */}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}