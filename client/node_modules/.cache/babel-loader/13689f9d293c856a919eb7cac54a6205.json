{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\"; // query string\n\nimport qs from \"qs\"; // socket.io client\n\nconst io = require(\"socket.io-client\");\n\nconst socket = io(\"http://localhost:5000\");\nexport default function GamePage() {\n  // state\n  const [room, setRoom] = useState(\"\");\n  const [errorJoinedRoom, setErrorJoinedRoom] = useState(false);\n  const [waitSecondPlayer, setWaitSecondPlayer] = useState(false);\n  const [socketID, setSocketID] = useState(null);\n  const [mark, setMark] = useState(null);\n  const [opponent, setOpponent] = useState([]);\n  const [end, setEnd] = useState(false);\n  const [gameState, setGameState] = useState([]);\n  const [board, setBoard] = useState(null);\n  useEffect(() => {\n    console.log(\"NEW\"); //get current room and name\n\n    const {\n      room,\n      name\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    });\n    setRoom(room);\n    socket.emit(\"joinedNewRoom\", {\n      room,\n      name\n    }); // asigning id and mark\n\n    socket.on(\"assignID\", ({\n      id,\n      mark\n    }) => {\n      setSocketID(id);\n      setMark(mark);\n    }); // creating game (board, players ...)\n\n    socket.on(\"startTheGame\", ({\n      stateOfTheGame,\n      players\n    }) => {\n      setWaitSecondPlayer(false);\n      startGame(stateOfTheGame, players);\n      const board = new Array(9).fill(null);\n      setBoard(board);\n    });\n  }, []); // assigning board state and players data\n\n  const startGame = (state, players) => {\n    const player2 = players.filter(el => el.id !== socketID)[0][1];\n    setOpponent([player2, 0]);\n    setGameState(state);\n  }; // Render\n\n\n  if (errorJoinedRoom) return /*#__PURE__*/React.createElement(Redirect, {\n    to: `/`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 31\n    }\n  });else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, Array(9).fill(null).map(el => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        className: \"cell\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 22\n        }\n      });\n    })));\n  }\n}","map":{"version":3,"sources":["/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js"],"names":["React","useEffect","useState","Redirect","qs","io","require","socket","GamePage","room","setRoom","errorJoinedRoom","setErrorJoinedRoom","waitSecondPlayer","setWaitSecondPlayer","socketID","setSocketID","mark","setMark","opponent","setOpponent","end","setEnd","gameState","setGameState","board","setBoard","console","log","name","parse","window","location","search","ignoreQueryPrefix","emit","on","id","stateOfTheGame","players","startGame","Array","fill","state","player2","filter","el","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\n// query string\nimport qs from \"qs\";\n// socket.io client\nconst io = require(\"socket.io-client\");\nconst socket = io(\"http://localhost:5000\");\n\nexport default function GamePage() {\n  // state\n  const [room, setRoom] = useState(\"\");\n  const [errorJoinedRoom, setErrorJoinedRoom] = useState(false);\n  const [waitSecondPlayer, setWaitSecondPlayer] = useState(false);\n  const [socketID, setSocketID] = useState(null);\n  const [mark, setMark] = useState(null);\n  const [opponent, setOpponent] = useState([]);\n  const [end, setEnd] = useState(false);\n  const [gameState, setGameState] = useState([]);\n  const [board, setBoard] = useState(null);\n\n  useEffect(() => {\n    console.log(\"NEW\");\n    //get current room and name\n    const { room, name } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    setRoom(room);\n    socket.emit(\"joinedNewRoom\", { room, name });\n\n    // asigning id and mark\n    socket.on(\"assignID\", ({ id, mark }) => {\n      setSocketID(id);\n      setMark(mark);\n    });\n\n    // creating game (board, players ...)\n    socket.on(\"startTheGame\", ({ stateOfTheGame, players }) => {\n      setWaitSecondPlayer(false);\n      startGame(stateOfTheGame, players);\n      const board = new Array(9).fill(null);\n      setBoard(board);\n    });\n  }, []);\n\n  // assigning board state and players data\n  const startGame = (state, players) => {\n    const player2 = players.filter((el) => el.id !== socketID)[0][1];\n    setOpponent([player2, 0]);\n    setGameState(state);\n  };\n\n  // Render\n  if (errorJoinedRoom) return <Redirect to={`/`} />;\n  else {\n    return (\n      <div className=\"container-board\">\n        <div className=\"board\">\n          {Array(9)\n            .fill(null)\n            .map((el) => {\n              return <button className=\"cell\"></button>;\n            })}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}