{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./GamePage.scss\";\nimport BoardRender from \"../BoardRender/BoardRender\";\nimport \"./fontawesome/css/font-awesome.css\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\"; // query string\n\nimport qs from \"qs\"; // socket.io client\n\nconst io = require(\"socket.io-client\");\n\nconst socket = io(\"http://localhost:5000\");\nexport default function GamePage() {\n  // main state\n  const [waiting, setWaiting] = useState(true);\n  const [roomID, setRoomID] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [errorJoin, setErrorJoin] = useState(false);\n  const [playerID, setPlayerID] = useState(\"\");\n  const [sign, setSign] = useState(\"\");\n  const [board, setBoard] = useState([]);\n  const [turn, setTurn] = useState(null);\n  const [enemy, setEnemy] = useState([]);\n  const [endGame, setEndGame] = useState(false);\n  const [currentScore, setCurrentScore] = useState(null);\n  const [enemyScore, setEnemytScore] = useState(null);\n  let countWin = 1;\n  let countLose = 1;\n  useEffect(() => {\n    //get current room and name\n    const {\n      room,\n      name\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    }); //handle error join\n\n    if (!name || !room) {\n      setErrorJoin(true);\n    }\n\n    setRoomID(room);\n    setName(name);\n    socket.on(\"initSignAndId\", ({\n      id,\n      sign\n    }) => {\n      setSign(sign);\n      setPlayerID(id);\n    });\n  }, []); // when two players in the room start the game\n\n  socket.on(\"startTheGame\", ({\n    turn,\n    board,\n    waiting,\n    players\n  }) => {\n    const isCurrentTurn = turn === sign;\n    const enemyPlayer = players.filter(player => !player.includes(playerID));\n    setBoard(board);\n    setTurn(isCurrentTurn);\n    setWaiting(waiting);\n    setEnemy(enemyPlayer);\n  });\n  useEffect(() => {\n    if (roomID) {\n      socket.emit(\"newJoinToTheRoom\", {\n        roomID,\n        name\n      });\n    }\n  }, [roomID]);\n  useEffect(() => {\n    socket.on(\"win\", ({\n      board,\n      id,\n      signWinner\n    }) => {\n      function updateScore() {\n        if (id === playerID) {\n          console.log(playerID, id, currentScore);\n          const updateScore = currentScore + 1;\n          setCurrentScore(updateScore);\n\n          if (countWin === 1) {\n            console.log(countWin);\n            NotificationManager.success(\"Congratulations!\", \"Game over\", 5000);\n            countWin--;\n          }\n        } else {\n          const updateScore = enemyScore + 1;\n          setEnemytScore(updateScore);\n\n          if (countLose === 1) {\n            NotificationManager.success(\"You almost win!\", \"Game over\", 5000);\n            countLose--;\n          }\n        }\n\n        setBoard(board);\n      }\n\n      if (playerID) {\n        console.log(\"RENDER WIN\");\n        updateScore();\n      }\n    });\n\n    if (playerID) {\n      socket.on(\"draw\", ({\n        board\n      }) => {\n        setBoard(board);\n        NotificationManager.error(\"\", \"Draw!\", 2000);\n      });\n    }\n\n    socket.on(\"restartGame\", ({\n      board,\n      currentTurn,\n      currentScore,\n      enemyScore\n    }) => {\n      const isCurrentTurn = currentTurn === sign;\n      setBoard(board);\n      setEndGame(false);\n      setTurn(isCurrentTurn);\n      countWin = 1;\n      countLose = 1;\n    });\n  }, [playerID, currentScore, enemyScore]); // useEffect(() => {\n  //   if (currentScore) {\n  //     NotificationManager.success(\"Congratulations!\", \"Game over\", 5000);\n  //   }\n  // }, [currentScore]);\n  // useEffect(() => {\n  //   if (enemyScore) {\n  //     NotificationManager.success(\"You almost win!\", \"Game over\", 5000);\n  //   }\n  // }, [enemyScore]);\n  // update data from server\n\n  socket.on(\"updateBoard\", ({\n    board,\n    currentTurn,\n    signWinner\n  }) => {\n    const isCurrentTurn = currentTurn === sign;\n\n    if (signWinner) {\n      setEndGame(true);\n      setTurn(false);\n    } else {\n      setTurn(isCurrentTurn);\n    }\n\n    setBoard(board);\n  });\n\n  const handleClick = (e, i) => {\n    if (turn && !endGame && !board[i]) {\n      socket.emit(\"playerMove\", {\n        i,\n        sign,\n        roomID\n      });\n    } else if (board[i]) {\n      NotificationManager.error(\"\", \"Ooophs!\", 1000);\n    } else {\n      NotificationManager.error(\"\", \"Wait for the opponents move!\", 1000);\n    }\n  };\n\n  const handleRestart = sign => {\n    console.log(sign);\n\n    if (sign) {\n      socket.emit(\"restart\", {\n        sign,\n        roomID,\n        currentScore,\n        enemyScore\n      });\n    }\n  };\n\n  const createUniqueRoomID = () => Date.now().toString(36) + Math.random().toString(36).substr(2); // Render\n\n\n  const classNameOfTheCell = (i, el) => {\n    const notSelected = i === 0 ? \"cell bottom right\" : i === 1 ? \"cell bottom\" : i === 2 ? \"cell bottom left\" : i === 3 ? \"cell bottom right\" : i === 4 ? \"cell bottom\" : i === 5 ? \"cell bottom left\" : i === 6 ? \"cell right\" : i === 7 ? \"cell right\" : \"cell\";\n    return `${notSelected} `;\n  };\n\n  const renderGameStage = () => {\n    if (endGame) {\n      return /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 14\n        }\n      }, \"Game Over!\");\n    } else {\n      return turn ? \"Your turn\" : \"Wait for the opponent's move\";\n    }\n  };\n\n  if (errorJoin) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: `/`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 12\n      }\n    });\n  } else if (waiting) {\n    return /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 12\n      }\n    }, `Waiting another player... Copy game ID => ${roomID}`);\n  } else {\n    console.log(currentScore);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-\\u0441ontainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => handleRestart(sign),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }, \"Restart\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"turn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }\n    }, renderGameStage()), board.map((el, i) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: createUniqueRoomID(),\n        className: classNameOfTheCell(i, el),\n        onClick: e => handleClick(e, i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"span-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: el === \"X\" ? \"fa fa-times\" : el === \"O\" ? \"fa fa-circle-o\" : \"\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }\n      })));\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }\n    }, \"Score board\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"current-score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"currentName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }\n    }, \" You\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"score-player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }\n    }, currentScore ? currentScore : 0)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"enemy-score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"opponentName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }\n    }, \" Oponent \"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"score-player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }\n    }, enemyScore ? enemyScore : 0))))), /*#__PURE__*/React.createElement(NotificationContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }\n    }));\n  }\n}","map":{"version":3,"sources":["/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js"],"names":["React","useEffect","useState","Redirect","BoardRender","NotificationContainer","NotificationManager","qs","io","require","socket","GamePage","waiting","setWaiting","roomID","setRoomID","name","setName","errorJoin","setErrorJoin","playerID","setPlayerID","sign","setSign","board","setBoard","turn","setTurn","enemy","setEnemy","endGame","setEndGame","currentScore","setCurrentScore","enemyScore","setEnemytScore","countWin","countLose","room","parse","window","location","search","ignoreQueryPrefix","on","id","players","isCurrentTurn","enemyPlayer","filter","player","includes","emit","signWinner","updateScore","console","log","success","error","currentTurn","handleClick","e","i","handleRestart","createUniqueRoomID","Date","now","toString","Math","random","substr","classNameOfTheCell","el","notSelected","renderGameStage","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport \"./GamePage.scss\";\nimport BoardRender from \"../BoardRender/BoardRender\";\nimport \"./fontawesome/css/font-awesome.css\";\n\nimport {\n  NotificationContainer,\n  NotificationManager,\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\n\n// query string\nimport qs from \"qs\";\n// socket.io client\nconst io = require(\"socket.io-client\");\nconst socket = io(\"http://localhost:5000\");\n\nexport default function GamePage() {\n  // main state\n  const [waiting, setWaiting] = useState(true);\n  const [roomID, setRoomID] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [errorJoin, setErrorJoin] = useState(false);\n  const [playerID, setPlayerID] = useState(\"\");\n  const [sign, setSign] = useState(\"\");\n  const [board, setBoard] = useState([]);\n  const [turn, setTurn] = useState(null);\n  const [enemy, setEnemy] = useState([]);\n  const [endGame, setEndGame] = useState(false);\n  const [currentScore, setCurrentScore] = useState(null);\n  const [enemyScore, setEnemytScore] = useState(null);\n  let countWin = 1;\n  let countLose = 1;\n  useEffect(() => {\n    //get current room and name\n    const { room, name } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    //handle error join\n    if (!name || !room) {\n      setErrorJoin(true);\n    }\n    setRoomID(room);\n    setName(name);\n    socket.on(\"initSignAndId\", ({ id, sign }) => {\n      setSign(sign);\n      setPlayerID(id);\n    });\n  }, []);\n\n  // when two players in the room start the game\n  socket.on(\"startTheGame\", ({ turn, board, waiting, players }) => {\n    const isCurrentTurn = turn === sign;\n    const enemyPlayer = players.filter((player) => !player.includes(playerID));\n    setBoard(board);\n    setTurn(isCurrentTurn);\n    setWaiting(waiting);\n    setEnemy(enemyPlayer);\n  });\n\n  useEffect(() => {\n    if (roomID) {\n      socket.emit(\"newJoinToTheRoom\", { roomID, name });\n    }\n  }, [roomID]);\n\n  useEffect(() => {\n    socket.on(\"win\", ({ board, id, signWinner }) => {\n      function updateScore() {\n        if (id === playerID) {\n          console.log(playerID, id, currentScore);\n          const updateScore = currentScore + 1;\n          setCurrentScore(updateScore);\n          if (countWin === 1) {\n            console.log(countWin);\n            NotificationManager.success(\"Congratulations!\", \"Game over\", 5000);\n            countWin--;\n          }\n        } else {\n          const updateScore = enemyScore + 1;\n          setEnemytScore(updateScore);\n          if (countLose === 1) {\n            NotificationManager.success(\"You almost win!\", \"Game over\", 5000);\n            countLose--;\n          }\n        }\n        setBoard(board);\n      }\n      if (playerID) {\n        console.log(\"RENDER WIN\");\n        updateScore();\n      }\n    });\n    if (playerID) {\n      socket.on(\"draw\", ({ board }) => {\n        setBoard(board);\n        NotificationManager.error(\"\", \"Draw!\", 2000);\n      });\n    }\n    socket.on(\n      \"restartGame\",\n      ({ board, currentTurn, currentScore, enemyScore }) => {\n        const isCurrentTurn = currentTurn === sign;\n        setBoard(board);\n        setEndGame(false);\n        setTurn(isCurrentTurn);\n        countWin = 1;\n        countLose = 1;\n      }\n    );\n  }, [playerID, currentScore, enemyScore]);\n\n  // useEffect(() => {\n  //   if (currentScore) {\n  //     NotificationManager.success(\"Congratulations!\", \"Game over\", 5000);\n  //   }\n  // }, [currentScore]);\n\n  // useEffect(() => {\n  //   if (enemyScore) {\n  //     NotificationManager.success(\"You almost win!\", \"Game over\", 5000);\n  //   }\n  // }, [enemyScore]);\n\n  // update data from server\n  socket.on(\"updateBoard\", ({ board, currentTurn, signWinner }) => {\n    const isCurrentTurn = currentTurn === sign;\n    if (signWinner) {\n      setEndGame(true);\n      setTurn(false);\n    } else {\n      setTurn(isCurrentTurn);\n    }\n    setBoard(board);\n  });\n\n  const handleClick = (e, i) => {\n    if (turn && !endGame && !board[i]) {\n      socket.emit(\"playerMove\", { i, sign, roomID });\n    } else if (board[i]) {\n      NotificationManager.error(\"\", \"Ooophs!\", 1000);\n    } else {\n      NotificationManager.error(\"\", \"Wait for the opponents move!\", 1000);\n    }\n  };\n  const handleRestart = (sign) => {\n    console.log(sign);\n    if (sign) {\n      socket.emit(\"restart\", { sign, roomID, currentScore, enemyScore });\n    }\n  };\n\n  const createUniqueRoomID = () =>\n    Date.now().toString(36) + Math.random().toString(36).substr(2);\n\n  // Render\n  const classNameOfTheCell = (i, el) => {\n    const notSelected =\n      i === 0\n        ? \"cell bottom right\"\n        : i === 1\n        ? \"cell bottom\"\n        : i === 2\n        ? \"cell bottom left\"\n        : i === 3\n        ? \"cell bottom right\"\n        : i === 4\n        ? \"cell bottom\"\n        : i === 5\n        ? \"cell bottom left\"\n        : i === 6\n        ? \"cell right\"\n        : i === 7\n        ? \"cell right\"\n        : \"cell\";\n\n    return `${notSelected} `;\n  };\n\n  const renderGameStage = () => {\n    if (endGame) {\n      return <h3>Game Over!</h3>;\n    } else {\n      return turn ? \"Your turn\" : \"Wait for the opponent's move\";\n    }\n  };\n\n  if (errorJoin) {\n    return <Redirect to={`/`} />;\n  } else if (waiting) {\n    return <h3>{`Waiting another player... Copy game ID => ${roomID}`}</h3>;\n  } else {\n    console.log(currentScore);\n    return (\n      <div className=\"game-container\">\n        <div>\n          <div className=\"board-сontainer\">\n            <button onClick={() => handleRestart(sign)}>Restart</button>\n            <div className=\"turn\">{renderGameStage()}</div>\n            {board.map((el, i) => {\n              return (\n                <div\n                  key={createUniqueRoomID()}\n                  className={classNameOfTheCell(i, el)}\n                  onClick={(e) => handleClick(e, i)}>\n                  <div className=\"span-container\">\n                    <span\n                      className={\n                        el === \"X\"\n                          ? \"fa fa-times\"\n                          : el === \"O\"\n                          ? \"fa fa-circle-o\"\n                          : \"\"\n                      }\n                      aria-hidden=\"true\"></span>\n                  </div>\n                </div>\n              );\n            })}\n            <div className=\"board-score\">Score board</div>\n            <div className=\"container-score\">\n              <div className=\"current-score\">\n                <h3 className=\"currentName\"> You</h3>\n                <span className=\"score-player\">\n                  {currentScore ? currentScore : 0}\n                </span>\n              </div>\n              <div className=\"enemy-score\">\n                <h3 className=\"opponentName\"> Oponent </h3>\n                <span className=\"score-player\">\n                  {enemyScore ? enemyScore : 0}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n        <NotificationContainer />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}