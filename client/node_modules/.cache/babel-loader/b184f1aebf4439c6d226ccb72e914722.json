{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./GamePage.scss\";\nimport BoardRender from \"../BoardRender/BoardRender\"; // query string\n\nimport qs from \"qs\"; // socket.io client\n\nconst io = require(\"socket.io-client\");\n\nconst socket = io(\"http://localhost:5000\");\nexport default function GamePage() {\n  const [waiting, setWaiting] = useState(true);\n  const [roomID, setRoomID] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [errorJoin, setErrorJoin] = useState(false);\n  useEffect(() => {\n    //get current room and name\n    const {\n      room,\n      name\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    });\n    setRoomID(room);\n    setName(name); //handle error join\n\n    socket.on(\"joinError\", ({\n      id\n    }) => {\n      setErrorJoin(true);\n      console.log(\"ERROR\", id);\n    });\n  }, []);\n  useEffect(() => {\n    if (roomID && name) {\n      socket.emit(\"newJoinToTheRoom\", {\n        roomID,\n        name\n      });\n      console.log(roomID);\n      console.log(name);\n    }\n  }, [roomID]); // Render\n\n  if (errorJoin) {\n    alert(\"Error\");\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, `Hello ${name}!`), waiting ? /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, `Waiting another player... Copy game ID => ${roomID}`) : null);\n  }\n}","map":{"version":3,"sources":["/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js"],"names":["React","useEffect","useState","Redirect","BoardRender","qs","io","require","socket","GamePage","waiting","setWaiting","roomID","setRoomID","name","setName","errorJoin","setErrorJoin","room","parse","window","location","search","ignoreQueryPrefix","on","id","console","log","emit","alert"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAO,iBAAP;AACA,OAAOC,WAAP,MAAwB,4BAAxB,C,CAEA;;AACA,OAAOC,EAAP,MAAe,IAAf,C,CACA;;AACA,MAAMC,EAAE,GAAGC,OAAO,CAAC,kBAAD,CAAlB;;AACA,MAAMC,MAAM,GAAGF,EAAE,CAAC,uBAAD,CAAjB;AAEA,eAAe,SAASG,QAAT,GAAoB;AACjC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAM;AAAEiB,MAAAA,IAAF;AAAQJ,MAAAA;AAAR,QAAiBT,EAAE,CAACc,KAAH,CAASC,MAAM,CAACC,QAAP,CAAgBC,MAAzB,EAAiC;AACtDC,MAAAA,iBAAiB,EAAE;AADmC,KAAjC,CAAvB;AAGAV,IAAAA,SAAS,CAACK,IAAD,CAAT;AACAH,IAAAA,OAAO,CAACD,IAAD,CAAP,CANc,CAOd;;AACAN,IAAAA,MAAM,CAACgB,EAAP,CAAU,WAAV,EAAuB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAY;AACjCR,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,EAArB;AACD,KAHD;AAID,GAZQ,EAYN,EAZM,CAAT;AAcAxB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,MAAM,IAAIE,IAAd,EAAoB;AAClBN,MAAAA,MAAM,CAACoB,IAAP,CAAY,kBAAZ,EAAgC;AAAEhB,QAAAA,MAAF;AAAUE,QAAAA;AAAV,OAAhC;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYf,MAAZ;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACD;AACF,GANQ,EAMN,CAACF,MAAD,CANM,CAAT,CApBiC,CA4BjC;;AAEA,MAAII,SAAJ,EAAe;AACba,IAAAA,KAAK,CAAC,OAAD,CAAL;AACD,GAFD,MAEO;AACL,wBACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,SAAQf,IAAK,GAAnB,CADF,EAEGJ,OAAO,gBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,6CAA4CE,MAAO,EAAzD,CADM,GAEJ,IAJN,CADF;AAQD;AACF","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport \"./GamePage.scss\";\nimport BoardRender from \"../BoardRender/BoardRender\";\n\n// query string\nimport qs from \"qs\";\n// socket.io client\nconst io = require(\"socket.io-client\");\nconst socket = io(\"http://localhost:5000\");\n\nexport default function GamePage() {\n  const [waiting, setWaiting] = useState(true);\n  const [roomID, setRoomID] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [errorJoin, setErrorJoin] = useState(false);\n\n  useEffect(() => {\n    //get current room and name\n    const { room, name } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    setRoomID(room);\n    setName(name);\n    //handle error join\n    socket.on(\"joinError\", ({ id }) => {\n      setErrorJoin(true);\n      console.log(\"ERROR\", id);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (roomID && name) {\n      socket.emit(\"newJoinToTheRoom\", { roomID, name });\n      console.log(roomID);\n      console.log(name);\n    }\n  }, [roomID]);\n\n  // Render\n\n  if (errorJoin) {\n    alert(\"Error\");\n  } else {\n    return (\n      <div className=\"container-board\">\n        <h2>{`Hello ${name}!`}</h2>\n        {waiting ? (\n          <h3>{`Waiting another player... Copy game ID => ${roomID}`}</h3>\n        ) : null}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}