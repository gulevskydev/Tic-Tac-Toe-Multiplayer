{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./GamePage.scss\"; // query string\n\nimport qs from \"qs\"; // socket.io client\n\nconst io = require(\"socket.io-client\");\n\nconst socket = io(\"http://localhost:5000\");\nexport default function GamePage() {\n  // state\n  const [room, setRoom] = useState(\"\");\n  const [errorJoinedRoom, setErrorJoinedRoom] = useState(false);\n  const [waitSecondPlayer, setWaitSecondPlayer] = useState(false);\n  const [socketID, setSocketID] = useState(null);\n  const [mark, setMark] = useState(\"O\");\n  const [turn, setTurn] = useState(true);\n  const [opponent, setOpponent] = useState([]);\n  const [end, setEnd] = useState(false);\n  const [gameState, setGameState] = useState([]);\n  const [board, setBoard] = useState(new Array(9).fill(null));\n  useEffect(() => {\n    console.log(\"NEW\"); //get current room and name\n\n    const {\n      room,\n      name\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    });\n    setRoom(room);\n    socket.emit(\"joinedNewRoom\", {\n      room,\n      name\n    }); // asigning id and mark\n\n    socket.on(\"assignID\", ({\n      id,\n      playerMark\n    }) => {\n      console.log(id, playerMark);\n      setMark(playerMark);\n      setSocketID(id);\n    }); // creating game (board, players ...)\n\n    socket.on(\"startTheGame\", ({\n      stateOfTheGame,\n      players\n    }) => {\n      setWaitSecondPlayer(false);\n      startGame(stateOfTheGame, players);\n    });\n    socket.on(\"updateBoard\", ({\n      stateOfTheGame,\n      turn\n    }) => handleUpdateGame(stateOfTheGame, turn));\n  }, []);\n\n  const handleUpdateGame = (state, turn) => {\n    setBoard(state);\n    setTurn(turn);\n  }; // assigning board state and players data\n\n\n  const startGame = (state, players) => {\n    const player2 = players.filter(el => el.id !== socketID)[0][1];\n    setOpponent([player2, 0]);\n    setBoard(state);\n  };\n\n  const handleClick = id => {\n    console.log(mark);\n    socket.emit(\"move\", {\n      room,\n      mark,\n      id\n    });\n  };\n\n  const renderSquare = i => {\n    return /*#__PURE__*/React.createElement(Square, {\n      key: i,\n      value: this.state.game[i],\n      player: this.state.piece,\n      end: this.state.end,\n      id: i,\n      onClick: this.handleClick,\n      turn: this.state.turn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    });\n  };\n\n  const squareArray = [];\n\n  for (let i = 0; i < 9; i++) {\n    const newSquare = this.renderSquare(i);\n    squareArray.push(newSquare);\n  } // Render\n\n\n  if (errorJoinedRoom) return /*#__PURE__*/React.createElement(Redirect, {\n    to: `/`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 31\n    }\n  });else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, squareArray));\n  }\n}","map":{"version":3,"sources":["/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js"],"names":["React","useEffect","useState","Redirect","qs","io","require","socket","GamePage","room","setRoom","errorJoinedRoom","setErrorJoinedRoom","waitSecondPlayer","setWaitSecondPlayer","socketID","setSocketID","mark","setMark","turn","setTurn","opponent","setOpponent","end","setEnd","gameState","setGameState","board","setBoard","Array","fill","console","log","name","parse","window","location","search","ignoreQueryPrefix","emit","on","id","playerMark","stateOfTheGame","players","startGame","handleUpdateGame","state","player2","filter","el","handleClick","renderSquare","i","game","piece","squareArray","newSquare","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport \"./GamePage.scss\";\n\n// query string\nimport qs from \"qs\";\n// socket.io client\nconst io = require(\"socket.io-client\");\nconst socket = io(\"http://localhost:5000\");\n\nexport default function GamePage() {\n  // state\n  const [room, setRoom] = useState(\"\");\n  const [errorJoinedRoom, setErrorJoinedRoom] = useState(false);\n  const [waitSecondPlayer, setWaitSecondPlayer] = useState(false);\n  const [socketID, setSocketID] = useState(null);\n  const [mark, setMark] = useState(\"O\");\n  const [turn, setTurn] = useState(true);\n  const [opponent, setOpponent] = useState([]);\n  const [end, setEnd] = useState(false);\n  const [gameState, setGameState] = useState([]);\n  const [board, setBoard] = useState(new Array(9).fill(null));\n\n  useEffect(() => {\n    console.log(\"NEW\");\n    //get current room and name\n    const { room, name } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    setRoom(room);\n    socket.emit(\"joinedNewRoom\", { room, name });\n\n    // asigning id and mark\n    socket.on(\"assignID\", ({ id, playerMark }) => {\n      console.log(id, playerMark);\n      setMark(playerMark);\n      setSocketID(id);\n    });\n\n    // creating game (board, players ...)\n    socket.on(\"startTheGame\", ({ stateOfTheGame, players }) => {\n      setWaitSecondPlayer(false);\n      startGame(stateOfTheGame, players);\n    });\n\n    socket.on(\"updateBoard\", ({ stateOfTheGame, turn }) =>\n      handleUpdateGame(stateOfTheGame, turn)\n    );\n  }, []);\n\n  const handleUpdateGame = (state, turn) => {\n    setBoard(state);\n    setTurn(turn);\n  };\n\n  // assigning board state and players data\n  const startGame = (state, players) => {\n    const player2 = players.filter((el) => el.id !== socketID)[0][1];\n    setOpponent([player2, 0]);\n    setBoard(state);\n  };\n\n  const handleClick = (id) => {\n    console.log(mark);\n    socket.emit(\"move\", { room, mark, id });\n  };\n\n  const renderSquare = (i) => {\n    return (\n      <Square\n        key={i}\n        value={this.state.game[i]}\n        player={this.state.piece}\n        end={this.state.end}\n        id={i}\n        onClick={this.handleClick}\n        turn={this.state.turn}\n      />\n    );\n  };\n\n  const squareArray = [];\n  for (let i = 0; i < 9; i++) {\n    const newSquare = this.renderSquare(i);\n    squareArray.push(newSquare);\n  }\n  // Render\n  if (errorJoinedRoom) return <Redirect to={`/`} />;\n  else {\n    return (\n      <div className=\"container-board\">\n        <div className=\"board\">\n          {squareArray}\n\n          {/* {Array(9)\n            .fill(null)\n            .map((el, id) => {\n              return (\n                <button\n                  key={id}\n                  className=\"cell\"\n                  onClick={() => handleClick(id)}></button>\n              );\n            })} */}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}