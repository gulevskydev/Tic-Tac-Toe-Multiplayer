{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./GamePage.scss\";\nimport BoardRender from \"../BoardRender/BoardRender\";\nimport \"./fontawesome/css/font-awesome.css\"; // query string\n\nimport qs from \"qs\"; // socket.io client\n\nconst io = require(\"socket.io-client\");\n\nconst socket = io(\"http://localhost:5000\");\nexport default function GamePage() {\n  // main state\n  const [waiting, setWaiting] = useState(true);\n  const [roomID, setRoomID] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [errorJoin, setErrorJoin] = useState(false);\n  const [playerID, setPlayerID] = useState(\"\");\n  const [sign, setSign] = useState(\"\");\n  const [board, setBoard] = useState([]);\n  const [turn, setTurn] = useState(null);\n  const [enemy, setEnemy] = useState([]);\n  const [endGame, setEndGame] = useState(false);\n  useEffect(() => {\n    //get current room and name\n    const {\n      room,\n      name\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    }); //handle error join\n\n    if (!name || !room) {\n      setErrorJoin(true);\n    }\n\n    setRoomID(room);\n    setName(name);\n  }, []);\n  useEffect(() => {\n    if (roomID) {\n      socket.emit(\"newJoinToTheRoom\", {\n        roomID,\n        name\n      });\n    }\n  }, [roomID]);\n  socket.on(\"initSignAndId\", ({\n    id,\n    sign\n  }) => {\n    setSign(sign);\n    setPlayerID(id);\n  }); // when two players in the room start the game\n\n  socket.on(\"startTheGame\", ({\n    turn,\n    board,\n    waiting,\n    players\n  }) => {\n    const isCurrentTurn = turn === sign;\n    const enemyPlayer = players.filter(player => !player.includes(playerID));\n    setTurn(isCurrentTurn);\n    setBoard(board);\n    setWaiting(waiting);\n    setEnemy(enemyPlayer);\n  }); // update data from server\n\n  socket.on(\"updateBoard\", ({\n    board,\n    currentTurn,\n    signWinner\n  }) => {\n    const isCurrentTurn = currentTurn === sign;\n    console.log(board, turn);\n    setBoard(board);\n\n    if (signWinner) {\n      setEndGame(true);\n      setTurn(false);\n    } else {\n      setTurn(isCurrentTurn);\n    }\n  }); // when player win\n\n  socket.on(\"win\", ({\n    signWinner\n  }) => {\n    let winnerName = \"\";\n\n    if (sign === signWinner) {\n      winnerName = name;\n    }\n\n    setTurn(false);\n    alert(`Congratulations! ${winnerName} is a winner!`);\n  });\n\n  const handleClick = (e, i) => {\n    if (turn) {\n      console.log(e.target);\n      socket.emit(\"playerMove\", {\n        i,\n        sign,\n        roomID\n      });\n    } else {\n      console.log(\"CANT\");\n    }\n  }; // Render\n\n\n  const classNameOfTheCell = (i, el) => {\n    const notSelected = i === 0 ? \"cell bottom right\" : i === 1 ? \"cell bottom\" : i === 2 ? \"cell bottom left\" : i === 3 ? \"cell bottom right\" : i === 4 ? \"cell bottom\" : i === 5 ? \"cell bottom left\" : i === 6 ? \"cell right\" : i === 7 ? \"cell right\" : \"cell\"; // const selected =\n    //   el === \"X\" ? \"fa fa-times\" : el === \"O\" ? \"fa fa-circle-o\" : \"\";\n\n    return `${notSelected} `;\n  };\n\n  if (errorJoin) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: `/`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 12\n      }\n    });\n  } else {\n    console.log(enemy);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }, `${name} vs ${enemy}`), waiting ? /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, `Waiting another player... Copy game ID => ${roomID}`) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"turn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, turn ? \"Your turn\" : \"Wait for the opponent's move\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-\\u0441ontainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, board.map((el, i) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNameOfTheCell(i, el),\n        onClick: e => handleClick(e, i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"span-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: el === \"X\" ? \"fa fa-times\" : el === \"O\" ? \"fa fa-circle-o\" : \"\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 19\n        }\n      })));\n    })));\n  }\n}","map":{"version":3,"sources":["/home/dima/Desktop/Projects/tic-tac-toe/client/src/components/GamePage/GamePage.js"],"names":["React","useEffect","useState","Redirect","BoardRender","qs","io","require","socket","GamePage","waiting","setWaiting","roomID","setRoomID","name","setName","errorJoin","setErrorJoin","playerID","setPlayerID","sign","setSign","board","setBoard","turn","setTurn","enemy","setEnemy","endGame","setEndGame","room","parse","window","location","search","ignoreQueryPrefix","emit","on","id","players","isCurrentTurn","enemyPlayer","filter","player","includes","currentTurn","signWinner","console","log","winnerName","alert","handleClick","e","i","target","classNameOfTheCell","el","notSelected","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport \"./GamePage.scss\";\nimport BoardRender from \"../BoardRender/BoardRender\";\nimport \"./fontawesome/css/font-awesome.css\";\n\n// query string\nimport qs from \"qs\";\n// socket.io client\nconst io = require(\"socket.io-client\");\nconst socket = io(\"http://localhost:5000\");\n\nexport default function GamePage() {\n  // main state\n  const [waiting, setWaiting] = useState(true);\n  const [roomID, setRoomID] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [errorJoin, setErrorJoin] = useState(false);\n  const [playerID, setPlayerID] = useState(\"\");\n  const [sign, setSign] = useState(\"\");\n  const [board, setBoard] = useState([]);\n  const [turn, setTurn] = useState(null);\n  const [enemy, setEnemy] = useState([]);\n  const [endGame, setEndGame] = useState(false);\n\n  useEffect(() => {\n    //get current room and name\n    const { room, name } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true,\n    });\n    //handle error join\n    if (!name || !room) {\n      setErrorJoin(true);\n    }\n    setRoomID(room);\n    setName(name);\n  }, []);\n\n  useEffect(() => {\n    if (roomID) {\n      socket.emit(\"newJoinToTheRoom\", { roomID, name });\n    }\n  }, [roomID]);\n\n  socket.on(\"initSignAndId\", ({ id, sign }) => {\n    setSign(sign);\n    setPlayerID(id);\n  });\n\n  // when two players in the room start the game\n  socket.on(\"startTheGame\", ({ turn, board, waiting, players }) => {\n    const isCurrentTurn = turn === sign;\n    const enemyPlayer = players.filter((player) => !player.includes(playerID));\n    setTurn(isCurrentTurn);\n    setBoard(board);\n    setWaiting(waiting);\n    setEnemy(enemyPlayer);\n  });\n\n  // update data from server\n  socket.on(\"updateBoard\", ({ board, currentTurn, signWinner }) => {\n    const isCurrentTurn = currentTurn === sign;\n    console.log(board, turn);\n    setBoard(board);\n    if (signWinner) {\n      setEndGame(true);\n      setTurn(false);\n    } else {\n      setTurn(isCurrentTurn);\n    }\n  });\n\n  // when player win\n  socket.on(\"win\", ({ signWinner }) => {\n    let winnerName = \"\";\n    if (sign === signWinner) {\n      winnerName = name;\n    }\n    setTurn(false);\n    alert(`Congratulations! ${winnerName} is a winner!`);\n  });\n\n  const handleClick = (e, i) => {\n    if (turn) {\n      console.log(e.target);\n      socket.emit(\"playerMove\", { i, sign, roomID });\n    } else {\n      console.log(\"CANT\");\n    }\n  };\n\n  // Render\n\n  const classNameOfTheCell = (i, el) => {\n    const notSelected =\n      i === 0\n        ? \"cell bottom right\"\n        : i === 1\n        ? \"cell bottom\"\n        : i === 2\n        ? \"cell bottom left\"\n        : i === 3\n        ? \"cell bottom right\"\n        : i === 4\n        ? \"cell bottom\"\n        : i === 5\n        ? \"cell bottom left\"\n        : i === 6\n        ? \"cell right\"\n        : i === 7\n        ? \"cell right\"\n        : \"cell\";\n    // const selected =\n    //   el === \"X\" ? \"fa fa-times\" : el === \"O\" ? \"fa fa-circle-o\" : \"\";\n    return `${notSelected} `;\n  };\n\n  if (errorJoin) {\n    return <Redirect to={`/`} />;\n  } else {\n    console.log(enemy);\n    return (\n      <div>\n        <h2>{`${name} vs ${enemy}`}</h2>\n        {waiting ? (\n          <h3>{`Waiting another player... Copy game ID => ${roomID}`}</h3>\n        ) : null}\n        <div className=\"turn\">\n          {turn ? \"Your turn\" : \"Wait for the opponent's move\"}\n        </div>\n        <div className=\"board-сontainer\">\n          {board.map((el, i) => {\n            return (\n              <div\n                className={classNameOfTheCell(i, el)}\n                onClick={(e) => handleClick(e, i)}>\n                <div className=\"span-container\">\n                  <span\n                    className={\n                      el === \"X\"\n                        ? \"fa fa-times\"\n                        : el === \"O\"\n                        ? \"fa fa-circle-o\"\n                        : \"\"\n                    }\n                    aria-hidden=\"true\"></span>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}